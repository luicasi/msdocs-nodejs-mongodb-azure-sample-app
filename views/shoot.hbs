       <div class="shoot-contentarea" style="font-size: 16px; font-family: Arial; text-align: center;">
            <div id="shooting" style="display: none;">
                <div class="camera">
                    <video id="video">Video stream not available.</video>
                </div>
                <div>
                <button id="startbutton">Capture Image</button>
                </div>
            </div>
            <canvas id="canvas" style="display: none; "></canvas>
    
            <div id="uploading" style="display: none;">
                <div class="output">
                    <img id="photo" alt="The image captured will appear in this box.">
                </div>
                <br/>
                <button id="uploadpicture">Upload this picture</button>
                <button id="shootagain">Take another picture</button>
            </div>
        </div>
    
        <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
        <script>
    
            const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
            const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);

            // We will scale the photo width to this.
            var width = vw - 50;
            // The height will be computed based on the input stream.
            var height = 0;
    
            var streaming = false;
    
            var video = null;
            var canvas = null;
            var photo = null;
    
            function startup() {
                video = document.getElementById('video');
                canvas = document.getElementById('canvas');
                photo = document.getElementById('photo');
    
                // Access the video stream from the webcam.
                navigator.mediaDevices.getUserMedia({
                    video: {
                        facingMode: 'environment'
                    },
                    audio: false
                })
                // Upon success, stream video in a video tag.
                .then(function(stream) {
                    video.srcObject = stream;
                    video.play();
                })
                .catch(function(err) {
                    console.log("An error occurred: " + err);
                });
    
                video.addEventListener('canplay', function(ev) {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);
                        if (height > vh - 150){
                            height = vh - 150;
                            width = video.videoWidth / (video.videoHeight / height);
                        }

                        if (isNaN(height)) {
                            height = width / (4 / 3);
                        }
    
                        $(video).css('width', width);
                        $(video).css('height', height);
                        $(canvas).css('width', width);
                        $(canvas).css('height', height);
                        streaming = true;
                    }
                }, false);
    
                $("#startbutton").on('click', function(ev) {
                    takepicture();
                });
    
                $("#uploadpicture").on('click', function(ev) {
                    canvas.toBlob(upload);
                });
    
                $("#shootagain").on('click', function(ev) {
                    clearphoto();
                    $("#uploading").fadeOut(() => $("#shooting").fadeIn());
                });
    
                clearphoto();

                $("#shooting").show();
            }
    
			function upload(blob) {
				const form = new FormData();
				form.append("image", blob, "pic.png")
				fetch("/upload/shoot", {
					method:'POST',
					body:form,
				}, )
                .then(res => {
                    if (res.ok) 
                        location = "/pictures";
                    else 
                        alert(res.text());
                    })
                .catch(err => alert(err))
			}	
			
            /*Collect the frames of the photo from the canvas and then
              convert it into a PNG format, so that it can be shown in
              the HTML page.*/
            function clearphoto() {
                var context = canvas.getContext('2d');
                context.fillStyle = "#AAA";
                context.fillRect(0, 0, canvas.width, canvas.height);
    
                var data = canvas.toDataURL('image/png');
    
                photo.setAttribute('src', data);
            }
    
            /*Capture a frame from the video stream.*/
            function takepicture() {
                var context = canvas.getContext('2d');
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);
    
                    /*toDataURL('image/png') returns a data URL containing a
                      representation of the image in PNG format.*/
                    var data = canvas.toDataURL('image/png');
    
                    /*'src' is the name of the attribute whose value is to be set.
                      'data' is a string containing the value to assign to the attribute.*/
                    photo.setAttribute('src', data);
                    $("#shooting").fadeOut(() => $("#uploading").fadeIn());
                    
                } else {
                    clearphoto();
                }
            }

            $(() => {
                startup();
            })
        </script>
